Changelog next version
----------------------
* awaitility-java8 project was renamed to awaitility-java8-test to better describe its purpose.
* Support for automatic deadlock detection. The awaitility stracktrace will now include deadlock information if a deadlock was found (thanks to Tobias Bieniek for pull request).
* Condition evaluation listeners now supports non Hamcrest based conditions (thanks to Tomasz KalkosiÅ„ski for the help).
* Condition evaluation listeners now expose condition alias
* Improved error messages for lambda- and Runnable conditions

Changelog 1.6.1 (2014-07-03)
----------------------------
* Added support for condition evaluation listeners. A listener is called each time a Hamcrest-based condition has been evaluated by Awaitility. For example:
    with().
            conditionEvaluationListener(condition -> System.out.printf("%s (elapsed time %dms, remaining time %dms)\n", condition.getDescription(), condition.getElapsedTimeInMS(), condition.getRemainingTimeInMS())).
            await().atMost(Duration.TEN_SECONDS).until(new CountDown(5), is(equalTo(0)));
  will print the following to the console:
    com.jayway.awaitility.AwaitilityJava8Test$CountDown expected (<0> or a value less than <0>) but was <5> (elapsed time 101ms, remaining time 1899ms)
    com.jayway.awaitility.AwaitilityJava8Test$CountDown expected (<0> or a value less than <0>) but was <4> (elapsed time 204ms, remaining time 1796ms)
    com.jayway.awaitility.AwaitilityJava8Test$CountDown expected (<0> or a value less than <0>) but was <3> (elapsed time 306ms, remaining time 1694ms)
    com.jayway.awaitility.AwaitilityJava8Test$CountDown expected (<0> or a value less than <0>) but was <2> (elapsed time 407ms, remaining time 1593ms)
    com.jayway.awaitility.AwaitilityJava8Test$CountDown expected (<0> or a value less than <0>) but was <1> (elapsed time 508ms, remaining time 1492ms)
    com.jayway.awaitility.AwaitilityJava8Test$CountDown reached its end value of (<0> or a value less than <0>) (elapsed time 610ms, remaining time 1390ms)
  Big thanks to Maciej Gawinecki for the help.
* Added primitive values to matching check when doing await().untilTrue(..) and await().untilFalse(..) (issue 26)
* Fixed issue that caused poll interval to be used as poll delay (issue 29).

Changelog 1.6.0 (2014-04-23)
----------------------------
* Support for using Fest Assert and AssertJ: await().until(() -> assertThat(fakeRepository.getValue()).isEqualTo(1));
* Better Java 8 support
* Updated Groovy module to use Groovy 2.2.2
* Updated CgLib to version 3.1

Changelog 1.5.0 (2014-01-27)
----------------------------
* Updated Objenesis dependency to version 2.1
* Added support for returning the last polled value from Awaitility when using proxy conditions. For example: int y = await().untilCall(to(x).y(), greaterThan(2)); (issue 13).
* Updated Groovy dependency to 2.2.1.
* Non backward-compatible change: Awaitility now throws com.jayway.awaitility.core.ConditionTimeoutException instead of java.concurrent.TimeoutException. The reason is that ConditionTimeoutException is a runtime exception and the latter couldn't be caught since "await" didn't declare the checked exception. (issue 24)
* Awaitility now catches all uncaught throwables from each thread and propagates them to the main thread (issue 22).
* Improved error messages when using aliased await conditions (issue 21).

Changelog 1.4.0 (2013-11-26)
----------------------------
* Updated Groovy to version 2.2.0
* Fixed a bug that sometimes accidentally used poll interval as poll delay
* Updated to Hamcrest 1.3
* Updated Scala to version 2.10.3

Changelog 1.3.5 (2013-02-16)
----------------------------
* Added untilFalse method to make it easier to wait until an atomic boolean is false: await().untilFalse(myAtomicBoolean);
* Removed all checked exceptions from Awaitility so that you don't need to catch them (issue 19).
* Improved error message when trying to proxy final methods (issue 10).

Changelog 1.3.4 (2012-02-13)
----------------------------
* Updated Scala module to use Scala 2.9.1
* Now uses the poll interval as delay _between_ scheduled tasks. This means that if the supplier takes more time to return the value than what's defined by the poll interval the supplier won't be called twice (or more) (issue 12).
* Now supports usage of more flexible Hamcrest matchers (thanks to Xavier Dury for the patch) (issue 15).
* Upgraded Hamcrest to version 1.2.1.

Changelog 1.3.3
---------------
* Added support for AtomicInteger, AtomicLong, AtomicReference and AtomicBoolean, e.g. await().untilAtomic(atomic, equalTo(2)).

Changelog 1.3.2
---------------
* Fixed an issue where poll interval overrode the poll delay.
* Awaitility now throws IllegalStateException when timeout is less than or equal to the poll interval or poll delay.
* Improved error messages when using field suppliers (e.g. await().until( fieldIn(object).ofType(int.class), is(2) );) when timeout occurs.

Changelog 1.3.1
---------------
* Groovy support! Syntax is: await().until { something() > 5 }
* Improved error messages in Scala DSL.
* Add SPI support for extension DSL:s which allows them to provide error messages.

Changelog 1.3
-------------
* MethodCallRecorder generates an exception on getLastXXX if no method call have been recorded. 
* MethodCallRecorder is reset after retrieving last calls and on Awaitility.reset 
* Added basic support for Scala functions
* Added a fieldIn method to Awaitility which allows you to build a supplier using a field, e.g. await().until(fieldIn(object).ofType(int.class), equalTo(1));
* Backward incompatible refactoring: until(callTo(..)) has been renamed to untilCall(to(..)). This to allow for extension DSL's (such as the Scala DSL) to work appropriately.
* Fixed a bug that failed to set Awaitility to catch uncaught exceptions on reset

Changelog version 1.2.1
-----------------------
* Changed ProxyCreator to use the standard InvocationHandler interface
* Refactored for even better error messages.

Changelog version 1.2
---------------------
* Improved error messages for timeouts to include actual value.

Changelog version 1.1
---------------------
* Major internal refactoring to allow for better default error messages when a timeout occurs.
* Support for using proxy-based conditions (i.e. using Awaitility.callTo) when testing Eclipse applications.
* Calls to the method Object.finalize should not be recorded as this is part of gc.
